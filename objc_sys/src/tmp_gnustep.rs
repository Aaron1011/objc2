/* automatically generated by rust-bindgen 0.59.1 */

pub const OBJC_SMALL_OBJECT_MASK: u32 = 7;
pub const OBJC_SMALL_OBJECT_SHIFT: u32 = 3;
pub const OBJC_CAP_EXCEPTIONS: u32 = 0;
pub const OBJC_CAP_SYNCRONIZE: u32 = 1;
pub const OBJC_CAP_PROPERTIES: u32 = 2;
pub const OBJC_CAP_PROPERTY_INTROSPECTION: u32 = 3;
pub const OBJC_CAP_OPTIONAL_PROTOCOLS: u32 = 4;
pub const OBJC_CAP_NONFRAGILE_IVARS: u32 = 5;
pub const OBJC_CAP_TYPE_DEPENDENT_DISPATCH: u32 = 6;
pub const OBJC_CAP_LOW_MEMORY: u32 = 7;
pub const OBJC_DEVELOPER_MODE: u32 = 8;
pub const OBJC_UNIFIED_EXCEPTION_MODEL: u32 = 9;
pub const OBJC_CAP_REGISTERED_COMPATIBILITY_ALIASES: u32 = 10;
pub const OBJC_CAP_ARC: u32 = 11;
pub const OBJC_CAP_GARBAGE_COLLECTION: u32 = 12;
pub const OBJC_CAP_ASSOCIATED_REFERENCES: u32 = 13;
pub const OBJC_CAP_SMALL_OBJECTS: u32 = 14;
pub const OBJC_CAP_PROTOTYPES: u32 = 15;
pub const OBJC_ARC_AUTORELEASE_DEBUG: u32 = 16;
pub const OBJC_CAP_TRACING: u32 = 17;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_ivar {
    _unused: [u8; 0],
}
pub type Ivar = *mut objc_ivar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type SEL = *mut objc_selector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
pub type Class = *mut objc_class;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_object {
    pub isa: Class,
}
pub type id = *mut objc_object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_super {
    pub receiver: id,
    pub class: Class,
}
pub type IMP = ::std::option::Option<unsafe extern "C" fn(arg1: id, arg2: SEL, ...) -> id>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method {
    _unused: [u8; 0],
}
pub type Method = *mut objc_method;
pub type BOOL = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property {
    _unused: [u8; 0],
}
pub type objc_property_t = *mut objc_property;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_protocol {
    _unused: [u8; 0],
}
pub type Protocol = objc_protocol;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_description {
    pub name: SEL,
    pub types: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property_attribute_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_slot2 {
    pub method: IMP,
}
extern "C" {
    pub static mut objc_method_cache_version: u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_slot {
    pub owner: Class,
    pub cachedFor: Class,
    pub types: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_int,
    pub method: IMP,
    pub selector: SEL,
}
extern "C" {
    pub fn objc_msgSend(self_: id, _cmd: SEL, ...) -> id;
}
extern "C" {
    pub fn objc_msgSend_stret(self_: id, _cmd: SEL, ...);
}
extern "C" {
    pub fn objc_msgSend_fpret(self_: id, _cmd: SEL, ...) -> u128;
}
extern "C" {
    pub fn class_addIvar(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        size: usize,
        alignment: u8,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_addMethod(
        cls: Class,
        name: SEL,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_addProtocol(cls: Class, protocol: *mut Protocol) -> BOOL;
}
extern "C" {
    pub fn class_conformsToProtocol(cls: Class, protocol: *mut Protocol) -> BOOL;
}
extern "C" {
    pub fn class_copyIvarList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Ivar;
}
extern "C" {
    pub fn class_copyMethodList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Method;
}
extern "C" {
    pub fn class_copyPropertyList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn class_copyProtocolList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut Protocol;
}
extern "C" {
    pub fn class_createInstance(cls: Class, extraBytes: usize) -> id;
}
extern "C" {
    pub fn class_getClassMethod(aClass: Class, aSelector: SEL) -> Method;
}
extern "C" {
    pub fn class_getClassVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_getInstanceMethod(aClass: Class, aSelector: SEL) -> Method;
}
extern "C" {
    pub fn class_getInstanceSize(cls: Class) -> usize;
}
extern "C" {
    pub fn class_getInstanceVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn object_setIvar(object: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_getIvar(object: id, ivar: Ivar) -> id;
}
extern "C" {
    pub fn object_getInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        outValue: *mut *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn class_getMethodImplementation(cls: Class, name: SEL) -> IMP;
}
extern "C" {
    pub fn class_getMethodImplementation_stret(cls: Class, name: SEL) -> IMP;
}
extern "C" {
    pub fn class_getName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_getProperty(cls: Class, name: *const ::std::os::raw::c_char) -> objc_property_t;
}
extern "C" {
    pub fn class_getSuperclass(cls: Class) -> Class;
}
extern "C" {
    pub fn class_getVersion(theClass: Class) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_setVersion(theClass: Class, version: ::std::os::raw::c_int);
}
extern "C" {
    pub fn class_getWeakIvarLayout(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_isMetaClass(cls: Class) -> BOOL;
}
extern "C" {
    pub fn class_replaceMethod(
        cls: Class,
        name: SEL,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> IMP;
}
extern "C" {
    pub fn class_respondsToSelector(cls: Class, sel: SEL) -> BOOL;
}
extern "C" {
    pub fn class_getIvarLayout(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_setIvarLayout(cls: Class, layout: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn class_setSuperclass(cls: Class, newSuper: Class) -> Class;
}
extern "C" {
    pub fn class_setWeakIvarLayout(cls: Class, layout: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ivar_getName(ivar: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getOffset(ivar: Ivar) -> isize;
}
extern "C" {
    pub fn ivar_getTypeEncoding(ivar: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_copyArgumentType(
        method: Method,
        index: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_copyReturnType(method: Method) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_exchangeImplementations(m1: Method, m2: Method);
}
extern "C" {
    pub fn method_getArgumentType(
        method: Method,
        index: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_char,
        dst_len: usize,
    );
}
extern "C" {
    pub fn method_getImplementation(method: Method) -> IMP;
}
extern "C" {
    pub fn method_getName(method: Method) -> SEL;
}
extern "C" {
    pub fn method_getNumberOfArguments(method: Method) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn method_getReturnType(method: Method, dst: *mut ::std::os::raw::c_char, dst_len: usize);
}
extern "C" {
    pub fn method_getTypeEncoding(method: Method) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_setImplementation(method: Method, imp: IMP) -> IMP;
}
extern "C" {
    pub fn objc_allocateClassPair(
        superclass: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_disposeClassPair(cls: Class);
}
extern "C" {
    pub fn objc_getClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_getClassList(
        buffer: *mut Class,
        bufferLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_copyClassList(outCount: *mut ::std::os::raw::c_uint) -> *mut Class;
}
extern "C" {
    pub fn objc_getMetaClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_getRequiredClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_lookUpClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_getProtocol(name: *const ::std::os::raw::c_char) -> *mut Protocol;
}
extern "C" {
    pub fn objc_allocateProtocol(name: *const ::std::os::raw::c_char) -> *mut Protocol;
}
extern "C" {
    pub fn objc_registerProtocol(proto: *mut Protocol);
}
extern "C" {
    pub fn protocol_addMethodDescription(
        aProtocol: *mut Protocol,
        name: SEL,
        types: *const ::std::os::raw::c_char,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    );
}
extern "C" {
    pub fn protocol_addProtocol(aProtocol: *mut Protocol, addition: *mut Protocol);
}
extern "C" {
    pub fn protocol_addProperty(
        aProtocol: *mut Protocol,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    );
}
extern "C" {
    pub fn objc_registerClassPair(cls: Class);
}
extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn object_dispose(obj: id) -> id;
}
extern "C" {
    pub fn object_getClass(obj: id) -> Class;
}
extern "C" {
    pub fn object_setClass(obj: id, cls: Class) -> Class;
}
extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_getName(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_getAttributes(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_copyAttributeList(
        property: objc_property_t,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_attribute_t;
}
extern "C" {
    pub fn class_addProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn property_copyAttributeValue(
        property: objc_property_t,
        attributeName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn protocol_conformsToProtocol(p: *mut Protocol, other: *mut Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_copyMethodDescriptionList(
        p: *mut Protocol,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
        count: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_method_description;
}
extern "C" {
    pub fn protocol_copyPropertyList(
        p: *mut Protocol,
        count: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList2(
        p: *mut Protocol,
        count: *mut ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyProtocolList(
        p: *mut Protocol,
        count: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut Protocol;
}
extern "C" {
    pub fn objc_copyProtocolList(outCount: *mut ::std::os::raw::c_uint) -> *mut *mut Protocol;
}
extern "C" {
    pub fn protocol_getMethodDescription(
        p: *mut Protocol,
        aSel: SEL,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    ) -> objc_method_description;
}
extern "C" {
    pub fn _protocol_getMethodTypeEncoding(
        p: *mut Protocol,
        aSel: SEL,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn protocol_getName(p: *mut Protocol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn protocol_getProperty(
        p: *mut Protocol,
        name: *const ::std::os::raw::c_char,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> objc_property_t;
}
extern "C" {
    pub fn protocol_isEqual(p: *mut Protocol, other: *mut Protocol) -> BOOL;
}
extern "C" {
    pub fn objc_msg_lookup(arg1: id, arg2: SEL) -> IMP;
}
extern "C" {
    pub fn objc_msg_lookup_super(arg1: *mut objc_super, arg2: SEL) -> IMP;
}
extern "C" {
    pub fn sel_getName(sel: SEL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_getUid(selName: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn sel_isEqual(sel1: SEL, sel2: SEL) -> BOOL;
}
extern "C" {
    pub fn sel_registerName(selName: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn objc_msg_lookup_sender(receiver: *mut id, selector: SEL, sender: id) -> *mut objc_slot;
}
extern "C" {
    pub fn objc_get_slot(arg1: Class, arg2: SEL) -> *mut objc_slot;
}
extern "C" {
    pub fn objc_get_slot2(arg1: Class, arg2: SEL, arg3: *mut u64) -> *mut objc_slot2;
}
extern "C" {
    pub fn objc_slot_lookup_version(
        receiver: *mut id,
        selector: SEL,
        arg1: *mut u64,
    ) -> *mut objc_slot2;
}
extern "C" {
    pub fn objc_msg_lookup2(receiver: *mut id, selector: SEL) -> IMP;
}
pub const OBJC_ASSOCIATION_ASSIGN: ::std::os::raw::c_uint = 0;
pub const OBJC_ASSOCIATION_RETAIN_NONATOMIC: ::std::os::raw::c_uint = 1;
pub const OBJC_ASSOCIATION_COPY_NONATOMIC: ::std::os::raw::c_uint = 3;
pub const OBJC_ASSOCIATION_RETAIN: ::std::os::raw::c_uint = 769;
pub const OBJC_ASSOCIATION_COPY: ::std::os::raw::c_uint = 771;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type objc_AssociationPolicy = usize;
extern "C" {
    pub fn objc_getAssociatedObject(object: id, key: *const ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_setAssociatedObject(
        object: id,
        key: *const ::std::os::raw::c_void,
        value: id,
        policy: objc_AssociationPolicy,
    );
}
extern "C" {
    pub fn objc_removeAssociatedObjects(object: id);
}
extern "C" {
    pub fn imp_implementationWithBlock(block: id) -> IMP;
}
extern "C" {
    pub fn imp_getBlock(anImp: IMP) -> id;
}
extern "C" {
    pub fn imp_removeBlock(anImp: IMP) -> BOOL;
}
extern "C" {
    pub fn objc_set_apple_compatible_objcxx_exceptions(
        newValue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_atomic_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_valloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_realloc(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_calloc(nelem: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_free(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn objc_get_class(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_lookup_class(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_get_meta_class(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_next_class(enum_state: *mut *mut ::std::os::raw::c_void) -> Class;
}
extern "C" {
    pub fn class_pose_as(impostor: Class, super_class: Class) -> Class;
}
extern "C" {
    pub fn sel_get_typed_uid(
        name: *const ::std::os::raw::c_char,
        types: *const ::std::os::raw::c_char,
    ) -> SEL;
}
extern "C" {
    pub fn sel_get_any_typed_uid(name: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn sel_get_any_uid(name: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn sel_get_uid(name: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn sel_get_name(selector: SEL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_is_mapped(selector: SEL) -> BOOL;
}
extern "C" {
    pub fn sel_get_type(selector: SEL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_register_name(name: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn sel_register_typed_name(
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> SEL;
}
extern "C" {
    pub fn sel_eq(s1: SEL, s2: SEL) -> BOOL;
}
extern "C" {
    pub fn objc_test_capability(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_autorelease(obj: id) -> id;
}
extern "C" {
    pub fn objc_autoreleaseReturnValue(obj: id) -> id;
}
extern "C" {
    pub fn objc_initWeak(object: *mut id, value: id) -> id;
}
extern "C" {
    pub fn objc_loadWeak(object: *mut id) -> id;
}
extern "C" {
    pub fn objc_loadWeakRetained(obj: *mut id) -> id;
}
extern "C" {
    pub fn objc_retain(obj: id) -> id;
}
extern "C" {
    pub fn objc_retainAutorelease(obj: id) -> id;
}
extern "C" {
    pub fn objc_retainAutoreleaseReturnValue(obj: id) -> id;
}
extern "C" {
    pub fn objc_retainAutoreleasedReturnValue(obj: id) -> id;
}
extern "C" {
    pub fn objc_retainBlock(b: id) -> id;
}
extern "C" {
    pub fn objc_storeStrong(addr: *mut id, value: id) -> id;
}
extern "C" {
    pub fn objc_storeWeak(addr: *mut id, obj: id) -> id;
}
extern "C" {
    pub fn objc_autoreleasePoolPush() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_autoreleasePoolPop(pool: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn objc_copyWeak(dest: *mut id, src: *mut id);
}
extern "C" {
    pub fn objc_destroyWeak(addr: *mut id);
}
extern "C" {
    pub fn objc_moveWeak(dest: *mut id, src: *mut id);
}
extern "C" {
    pub fn objc_release(obj: id);
}
extern "C" {
    pub fn objc_delete_weak_refs(obj: id) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_category {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _objc_lookup_class:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> Class>;
}
extern "C" {
    pub static mut _objc_load_callback:
        ::std::option::Option<unsafe extern "C" fn(cls: Class, category: *mut objc_category)>;
}
extern "C" {
    pub static mut objc_proxy_lookup:
        ::std::option::Option<unsafe extern "C" fn(receiver: id, op: SEL) -> id>;
}
extern "C" {
    pub static mut __objc_msg_forward3:
        ::std::option::Option<unsafe extern "C" fn(arg1: id, arg2: SEL) -> *mut objc_slot>;
}
extern "C" {
    pub static mut __objc_msg_forward2:
        ::std::option::Option<unsafe extern "C" fn(arg1: id, arg2: SEL) -> IMP>;
}
extern "C" {
    pub static mut _objc_unexpected_exception:
        ::std::option::Option<unsafe extern "C" fn(exception: id)>;
}
extern "C" {
    pub static mut _objc_class_for_boxing_foreign_exception:
        ::std::option::Option<unsafe extern "C" fn(exceptionClass: i64) -> Class>;
}
extern "C" {
    pub static mut _objc_selector_type_mismatch2: ::std::option::Option<
        unsafe extern "C" fn(cls: Class, selector: SEL, result: *mut objc_slot2) -> IMP,
    >;
}
extern "C" {
    pub static mut _objc_selector_type_mismatch: ::std::option::Option<
        unsafe extern "C" fn(cls: Class, selector: SEL, result: *mut objc_slot) -> *mut objc_slot,
    >;
}
extern "C" {
    pub static mut _objc_weak_load: ::std::option::Option<unsafe extern "C" fn(object: id) -> id>;
}
pub type objc_tracing_hook = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: id,
        arg2: SEL,
        arg3: IMP,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_void,
    ) -> IMP,
>;
extern "C" {
    pub fn objc_registerTracingHook(arg1: SEL, arg2: objc_tracing_hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_skip_type_qualifiers(
        type_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_skip_typespec(
        type_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_skip_argspec(type_: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_sizeof_type(type_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn objc_alignof_type(type_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn objc_aligned_size(type_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn objc_promoted_size(type_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn method_get_number_of_arguments(method: *mut objc_method) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn objc_get_type_qualifiers(type_: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_struct_layout {
    pub original_type: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub prev_type: *const ::std::os::raw::c_char,
    pub record_size: ::std::os::raw::c_uint,
    pub record_align: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn objc_layout_structure(
        type_: *const ::std::os::raw::c_char,
        layout: *mut objc_struct_layout,
    );
}
extern "C" {
    pub fn objc_layout_structure_next_member(layout: *mut objc_struct_layout) -> BOOL;
}
extern "C" {
    pub fn objc_layout_structure_get_info(
        layout: *mut objc_struct_layout,
        offset: *mut ::std::os::raw::c_uint,
        align: *mut ::std::os::raw::c_uint,
        type_: *mut *const ::std::os::raw::c_char,
    );
}
