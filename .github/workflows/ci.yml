name: CI

on:
  push:
    branches: [master]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Faster compilation and error on warnings
  RUSTFLAGS: "-C debuginfo=0 -D warnings"
  RUSTDOCFLAGS: "-D warnings"
  CARGO_TERM_VERBOSE: true
  FEATURES: malloc,block,exception,catch_all,verify_message
  UNSTABLE_FEATURES: unstable_autoreleasesafe
  # We only support compiling Objective-C code with clang
  CC: clang
  CXX: clang++

jobs:
  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  test:
    name: ${{ matrix.name }}

    strategy:
      matrix:
        include:
          - name: Test macOS 10.15
            os: macos-10.15
            target: x86_64-apple-darwin
          - name: Test macOS 11
            os: macos-11
            target: x86_64-apple-darwin
          - name: Test macOS nightly
            os: macos-latest
            target: x86_64-apple-darwin
            rust:
              toolchain: nightly
          - name: Build macOS 32bit
            os: macos-10.15
            target: i686-apple-darwin
            rust:
              toolchain: nightly
              components: rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            # 32-bit support was removed in 10.15, so we can't test the
            # binary, only build it
            test-args: --no-run

          # - { target: x86_64-apple-ios,         os: macos-latest, }
          # - { target: aarch64-apple-ios,        os: macos-latest, }

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/
          target/
        key: ${{ matrix.name }}-cargo-${{ hashFiles('**/Cargo.toml') }}

    - name: Install Rust toolchain
      # Assume default toolchain is already installed
      if: matrix.rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain }}
        profile: minimal
        override: true
        components: ${{ matrix.rust.components }}
        # Yes, matrix.rust.target, not matrix.target
        target: ${{ matrix.rust.target }}

    - name: Download macOS 10.13 SDK (supports 32-bit)
      if: matrix.target == 'i686-apple-darwin'
      run: |
        wget https://github.com/alexey-lysiuk/macos-sdk/releases/download/10.13/MacOSX10.13.tar.bz2
        tar -xyf MacOSX10.13.tar.bz2
        echo "SDKROOT=$(pwd)/MacOSX10.13.sdk" >> $GITHUB_ENV

    - name: Check documentation
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: ${{ matrix.args }} --no-deps --document-private-items

    - name: Test without features
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ matrix.args }} ${{ matrix.test-args }} --no-fail-fast --no-default-features

    - name: Test with features
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ matrix.args }} ${{ matrix.test-args }} --no-fail-fast --features ${{ env.FEATURES }}

    - name: Test with unstable features
      if: matrix.rust.toolchain == 'nightly'
      uses: actions-rs/cargo@v1
      with:
        command: test
        # Not using --all-features because that would enable e.g. gnustep
        args: ${{ matrix.args }} ${{ matrix.test-args }} --no-fail-fast --features ${{ env.FEATURES }},${{ env.UNSTABLE_FEATURES }}
